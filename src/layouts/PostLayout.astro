---
import { Image } from "astro:assets";
import { LOCALE_DATE_FORMAT } from "../config";
import { type BlogSchema } from "../content/config";
import BaseLayout from "./BaseLayout.astro";
import { db, Votes, eq } from "astro:db";

export interface Props extends BlogSchema {}

const {
  title,
  description,
  pubDate,
  updatedDate,
  heroImage,
  badge,
  tags = [],
} = Astro.props;

const { slug } = Astro.params;
const postId = slug;

const currentVotes = await db
  .select()
  .from(Votes)
  .where(eq(Votes.postId, postId));

const displayDate = new Date(pubDate).toLocaleDateString(LOCALE_DATE_FORMAT);
---

<BaseLayout
  title={title}
  description={description}
  image={heroImage}
  ogType="article"
>
  <main class="md:flex md:justify-center">
    <article class="prose prose-lg max-w-[750px] prose-img:mx-auto">
      {
        heroImage && (
          <Image
            width={750}
            height={422}
            format="webp"
            src={heroImage}
            alt={title}
            class="w-full mb-6"
            transition:name={title}
          />
        )
      }
      <h1 class="title my-2 text-4xl font-bold">{title}</h1>
      {pubDate && <time>{displayDate}</time>}
      <br />
      {badge && <div class="badge badge-secondary my-1">{badge}</div>}
      {
        tags &&
          tags.map((tag) => (
            <a
              href={`/blog/tag/${tag}`}
              class="badge badge-outline ml-2 no-underline"
            >
              {tag}
            </a>
          ))
      }
      {
        updatedDate && (
          <div>
            {" "}
            Actalizado en <time>{updatedDate}</time>{" "}
          </div>
        )
      }
      <div class="text-center my-4">
        <button
          id="vote-button"
          class="flex items-center px-4 py-2 bg-slate-500 text-white font-semibold rounded-lg shadow-md hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-opacity-75 transform transition-transform duration-200 hover:scale-105 active:scale-110"
        >
          üëç
          <span id="vote-count" class="ml-2">{currentVotes.length}</span>
        </button>
      </div>
      <div class="divider my-2"></div>
      <slot />
    </article>
  </main>
</BaseLayout>

<script define:vars={{ postId }}>
  document.getElementById("vote-button").addEventListener("click", async () => {
    const response = await fetch(`/api/votes/${postId}`, { method: "POST" });
    if (response.ok) {
      const data = await response.json();
      const voteCountElement = document.getElementById("vote-count");
      voteCountElement.textContent = data.votes;
    }
  });
</script>
